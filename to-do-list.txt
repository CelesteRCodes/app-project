
NEW FORMS CREATED, BUTTONS WORK EXCEPT FOR 'add new plant' on new-plant.html 
and 'add new entry' on new-entry.html, geting a 404


the upload photo submit button also takes user back 
to homepage 


display info from input-form.html on grow-log.html in tables


figure out how to upload a photo, store it in database and display 
it on the grow-log.html in it's respective table


make sure that the info (commment at min) that user submits is actually 
stored in the db as a new entry 


TESTS! (unit and integration tests)
unit tests can be docstrings


styling of pages


create a new user, store new user information


log out button/function


ability to delete a grow log entry




6 web pages in total:

1. homepage with login
    -'forgot password' button currently takes user back to homepage; 
    can add a retrieve password page in sprint 2
    -

2. new-user.html register a new user, should add user's 
    info to db so login can check against it
    -submit button takes user back to login on homepage 

3. user-plants.html shows all the plants for that user
    -can also click on each plant to add a new entry to that plant's log
    -can also click on "add new plant" button to add a new plant

4. new-plant.html form to add a new plant to user's plants page
    -takes in plant name and plant type, adds it to the user-plants.html
    -once added to user-plant.html, a button is added that takes user 
        to new-entry.html to add a new grow log entry

5. new-entry.html form to add a new entry for a specific plant's grow login
    -can only get to this form by clicking on that specific plant; only used 
        to update that specific plants grow log

6. grow-log.html displays all the entries for that specific plant
    - has signout button that takes user back to homepage to log back in 
    
*it goes from user-plant.html, to new-entry.html (or new-plant.html first),
    then finally to grow-log.html for that specific plant


# will have one route to show the form
# another to process the form

# @app.route('/login', methods=['POST'])
# def register_user():
#     """Create a new user."""

#     username = request.form.get('username')
#     email = request.form.get('email')
#     password = request.form.get('password')

#     user = CRUD.get_user_by_email(email)
    
#     if user:
#         flash('Cannot create an account with that email. Try again.')
#     else:
#         CRUD.create_user(username, email, password)
#         flash('Account created! Please log in.')

#     return redirect('/')


# need to query into database for email given, if object with email, 
# grab password and compare it to password given


# API_KEY = os.environ['TICKETMASTER_KEY']

# # not sure I need an API for this part; 
# # using one to gather info from Trefle for references
# # for sprint 2 